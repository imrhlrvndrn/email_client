import { NextHead } from '@/components/NextHead/nexthead.comp';
import { useMailContext } from '@/context/MailContext/mail.context';
import { EmailClientLayout } from '@/layouts/emailclient.layout';
import { isPredefinedFolder, readJSONData } from '@/utils/json.utils';
import * as fs from 'fs';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function FolderSlug({ folder }) {
    const router = useRouter();
    const [_, dispatchMail] = useMailContext();

    useEffect(() => {
        dispatchMail({
            type: 'SET_ACTIVE_FOLDER',
            payload: folder,
        });
        localStorage.setItem('activeFolder', JSON.stringify(folder));
    }, [router?.query?.folderSlug]);

    return (
        <>
            {/* <Head>
                <title></title>
                <meta name='description' content='Generated by create next app' />
                <meta name='viewport' content='width=device-width, initial-scale=1' />
                <link rel='icon' href='/favicon.ico' />
            </Head> */}
            <NextHead title='Outlook' />
            <EmailClientLayout />
        </>
    );
}

export async function getStaticPaths() {
    const files = await fs.promises.readdir(`${process.cwd()}/json`);
    let allMailFolders = [];

    for (let i = 0; i < files?.length; i++) {
        if (files[i] === 'custom-folders.json') {
            const customFolders = await readJSONData(`${process.cwd()}/json/${files[i]}`);

            for (let i = 0; i < customFolders?.folders?.length; i++) {
                allMailFolders.push(customFolders?.folders?.[i]?._id);
            }
        } else {
            const folder = await readJSONData(`${process.cwd()}/json/${files[i]}`);
            allMailFolders.push(folder?.name);
        }
    }

    return {
        paths: allMailFolders?.map((folder) => ({ params: { folderSlug: folder } })),
        // [
        //     ({ params: { id: '1' } }, { params: { id: '2' } })
        // ],
        fallback: false, // can also be true or 'blocking'
    };
}

export async function getStaticProps(context) {
    let res;
    if (await isPredefinedFolder(context?.params?.folderSlug)) {
        //  Reading folder data from predefined folders
        res = await readJSONData(`${process.cwd()}/json/${context.params.folderSlug}.json`);
    } else {
        //  Reading folder data from custom user folders
        const customFolders = await readJSONData(`${process.cwd()}/json/custom-folders.json`);
        res =
            customFolders?.folders?.find((folder) => folder?._id === context?.params?.folderSlug) ||
            {};
    }

    return {
        props: {
            folder: res,
        },
    };
}
